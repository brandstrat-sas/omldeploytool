# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---
########################################################################
# Chequeos de red, de servicios instalados, folders y archivos creados #
########################################################################

# Me aseguro que se quiera instalar OML esté dentro de los SO permitidos.
- name: CHECKS Print omni_distribution
  debug: msg="omni_distribution es {{ ansible_os_family }}"
  changed_when: false
  tags: always

# Si no es asi, esta task generara un error esto es para AIO
- name: CHECKS Check omni_distribution
  fail: msg="omni_distribution con valor {{ ansible_os_family }} es invalida"
  when: ansible_os_family != "Debian" and ansible_os_family != "Rocky" and ansible_os_family != "AlmaLinux"
  changed_when: false
  tags: always

- name: CHECKS Check if exists /etc/omnileads
  stat:
    path: "/etc/omnileads"
  register: etc_omnileads
  tags: install

- name: CHECKS Check if exists /var/lib/omnileads
  stat:
    path: "/var/lib/omnileads"
  register: var_lib_omnileads
  tags: install

- name: CHECKS Check if exists /var/lib/omnileads/minio
  stat:
    path: "/var/lib/omnileads/minio"
  register: var_lib_omnileads_minio
  tags: install

- name: CHECKS Check if exists /var/lib/omnileads/pgsql
  stat:
    path: "/var/lib/omnileads/pgsql"
  register: var_lib_omnileads_pgsql
  tags: install

- name: CHECKS Setting postgres_host as localhost
  set_fact:
    postgres_host: localhost
  tags: always
  changed_when: false
  when:
    - postgres_host is not defined
    - omlapp is defined

- name: CHECKS Setting minio_host as instance LAN IP
  set_fact:
    minio_host: "{{ omni_ip_lan }}"
  tags: always
  changed_when: false
  when:
    - minio_host is not defined
    - omlapp is defined

- name: CHECKS Setting websockets_host as localhost
  set_fact:
    websockets_host: "{{ omni_ip_lan }}"
  tags: always
  changed_when: false
  when:
    - websockets_host is not defined
    - omlapp is defined

- name: CHECKS Setting kamailio_host as localhost
  set_fact:
    kamailio_host: "{{ omni_ip_lan }}"
  tags: always
  changed_when: false
  when:
    - kamailio_host is not defined
    - omlapp is defined

- name: CHECKS Setting redis_host as localhost
  set_fact:
    redis_host: "{{ omni_ip_lan }}"
  tags: always
  changed_when: false
  when:
    - redis_host is not defined
    - omlapp is defined

- name: CHECKS Setting asterisk_host as voice_host
  set_fact:
    asterisk_host: "{{ voice_host }}"
  tags: always
  changed_when: false
  when:
    - asterisk_host is not defined
    - omlapp is defined

- name: CHECKS Setting rtpengine_host as voice_host
  set_fact:
    rtpengine_host: "{{ voice_host }}"
  tags: always
  changed_when: false
  when:
    - rtpengine_host is not defined
    - omlapp is defined

- name: CHECKS  Setting postgres_host as application_host
  set_fact:
    postgres_host: "{{ application_host }}"
  changed_when: false
  when:
    - postgres_host is not defined
    - omlvoice is defined

- name: CHECKS  Setting minio_host as application_host
  set_fact:
    minio_host: "{{ application_host }}"
  changed_when: false
  when:
    - minio_host is not defined
    - omlvoice is defined

- name: CHECKS Setting redis_host as application_host
  set_fact:
    redis_host: "{{ application_host }}"
  tags: always
  changed_when: false
  when:
    - redis_host is not defined
    - omlvoice is defined

- name: CHECKS Setting nginx_host as application_host
  set_fact:
    nginx_host: "{{ application_host }}"
  tags: always
  changed_when: false
  when:
    - nginx_host is not defined
    - omlvoice is defined


# --- IMPORTANT: aqui controlo las variables que sean *requisito* para el deploy
# --- si no está declarada entonces puedo escapar con un fail

- name: CHECKS Check if TimeZone variable is defined
  fail:
    msg: TimeZone variable undefined, edit TZ variable in inventory file
  when: TZ is not defined and assert_tz.rc == 1
  tags: always

- name: CHECKS Check if postgres user variable is defined
  fail:
    msg: Postgres user undefined, edit postgres_user in inventory file
  when: postgres_user is not defined and assert_pguser.rc == 1
  tags: always

- name: CHECKS Check if postgres password variable is defined
  fail:
    msg: Postgres password undefined, edit postgres_password in inventory file
  when: postgres_password is not defined and assert_pgpass.rc == 1
  tags: always

- name: CHECKS Check if AMI user variable is defined
  fail:
    msg: AMI user undefined, edit ami_user in inventory file
  when: ami_user is not defined and assert_amiuser.rc == 1
  tags: always

- name: CHECKS Check if AMI password variable is defined
  fail:
    msg: AMI password undefined, edit ami_password in inventory file
  when: ami_password is not defined and assert_amipass.rc == 1
  tags: always

- name: CHECKS Check if WD user variable is defined
  fail:
    msg: WD user undefined, edit dialer_user in inventory file
  when: dialer_user is not defined and assert_dialeruser.rc == 1
  tags: always

- name: CHECKS Check if WD pass variable is defined
  fail:
    msg: WD pass undefined, edit dialer_password in inventory file
  when: dialer_password is not defined and assert_dialerpass.rc == 1
  tags: always


# --- IMPORTANT: aqui controlo la integridad de algunas variables
# --- como las dirrecciones IPs


# Obtengo IP publica del nodo
- name: CHECKS Get public IP address of node
  shell: curl http://ipinfo.io/ip
  register: publicip
  when: voip_public_hostname == "none" or voip_public_hostname == "auto" or voip_public_hostname is not defined
  tags: always

# Valido si lo que devolvió la tarea anterior es una IP
- name: CHECKS Validate IP public obtained
  shell: if [[ {{ publicip.stdout }} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo 0; else echo 1; fi
  args:
    executable: /bin/bash
  register: ip_val
  failed_when: false
  when: voip_public_hostname == "none" or voip_public_hostname == "auto" or voip_public_hostname is not defined
  tags: always

# Valido si lo que devolvió la tarea anterior es una IP
- name: CHECKS Validate IP public syntax
  shell: if [[ {{ publicip.stdout }} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo 0; else echo 1; fi
  args:
    executable: /bin/bash
  register: ip_val
  failed_when: false
  tags: always

- set_fact: omni_ip_wan="{{ publicip.stdout }}"
  when: voip_public_hostname == "none" or voip_public_hostname == "auto" or voip_public_hostname is not defined
  tags: always

# Valido si lo que devolvió la tarea anterior es una IP
- name: CHECKS Validate IP private syntax
  shell: if [[ {{ omni_ip_lan }} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo 0; else echo 1; fi
  args:
    executable: /bin/bash
  register: ip_val
  failed_when: false
  tags: always

# Si no es una IP tiro este mensaje de error
- fail:
    msg: "The private IP is wrong"
  when: ip_val is not skipped and ip_val.stdout != '0'
  tags: always
