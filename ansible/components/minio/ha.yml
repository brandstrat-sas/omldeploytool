# Copyright (C) 2024 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can nginxtribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---
- name: MINIO OMniLeads Minio High Availability component deploy
  hosts: 
    - omnileads_data
    - omnileads_aio
  tags:
    - all_components
    - minio
    - install
  vars:
    minio_cmd: /usr/bin/minio_cmd

  tasks:

  - name: MINIO check if node_1 alias is already set
    shell: "{{ minio_cmd }} alias list | grep 'MINIO_1 http://{{ aio_1 }}:9000'"
    register: alias_exist_1
    ignore_errors: true
    changed_when: alias_exist_1.rc == 0
    failed_when: false
    args:
      executable: /bin/bash
    when:
      - ha_role == "main"

  - name: MINIO set alias for node_1 if not set
    shell: "{{ minio_cmd }} alias set MINIO_1 http://{{ aio_1 }}:9000 '{{ s3_http_admin_user }}' '{{ s3_http_admin_pass }}'"
    args:
      executable: /bin/bash
    when:
      - alias_exist_1.rc is defined and alias_exist_1.rc != 0
      - ha_role == "main"

  - name: MINIO check if node_2 alias is already set
    shell: "{{ minio_cmd }} alias list | grep 'MINIO_2 http://{{ aio_2 }}:9000'"
    register: alias_exist_2
    ignore_errors: true
    changed_when: alias_exist_2.rc == 0
    failed_when: false
    args:
      executable: /bin/bash
    when:
      - ha_role == "main"

  - name: MINIO set alias for node_2 if not set
    shell: "{{ minio_cmd }} alias set MINIO_2 http://{{ aio_2 }}:9000 '{{ s3_http_admin_user }}' '{{ s3_http_admin_pass }}'"
    args:
      executable: /bin/bash
    when:
      - alias_exist_2.rc is defined and alias_exist_2.rc != 0
      - ha_role == "main"

  - name: MINIO check if bucket MINIO_1 exists
    shell: "{{ minio_cmd }} ls MINIO_1/{{ bucket_name }}"
    args:
      executable: /bin/bash
    register: bucket_exist_1
    ignore_errors: true
    changed_when: bucket_exist_1.rc == 0
    failed_when: false
    when:
      - ha_role == "main"

  - name: MINIO create bucket on node_1 if it does not exist
    shell: "{{ minio_cmd }} mb MINIO_1/{{ bucket_name }}"
    args:
      executable: /bin/bash
    when: 
      - bucket_exist_1.rc is defined and bucket_exist_1.rc != 0
      - ha_role == "main"

  - name: MINIO check if bucket MINIO_2 exists
    shell: "{{ minio_cmd }} ls MINIO_2/{{ bucket_name }}"
    args:
      executable: /bin/bash
    register: bucket_exist_2
    ignore_errors: true
    changed_when: bucket_exist_2.rc == 0
    failed_when: false
    when:
      - ha_role == "main"

  - name: MINIO create bucket on node_2 if it does not exist
    shell: "{{ minio_cmd }} mb MINIO_2/{{ bucket_name }}"
    args:
      executable: /bin/bash
    when: 
      - bucket_exist_2.rc is defined and bucket_exist_2.rc != 0
      - ha_role == "main"

  - name: MINIO check if user exists on node_1
    shell: "{{ minio_cmd }} admin user info MINIO_1 {{ bucket_access_key }}"
    register: user_exist_1
    ignore_errors: true
    changed_when: user_exist_1.rc == 0
    failed_when: false
    args:
      executable: /bin/bash
    when: ha_role == "main"

  - name: MINIO create user on node_1 if not exists
    shell: "{{ minio_cmd }} admin user add MINIO_1 {{ bucket_access_key }} {{ bucket_secret_key }}"
    args:
      executable: /bin/bash
    when: 
      - ha_role == "main"
      - user_exist_1.rc is defined and user_exist_1.rc != 0

  - name: MINIO check if user exists on node_2
    shell: "{{ minio_cmd }} admin user info MINIO_2 {{ bucket_access_key }}"
    register: user_exist_2
    ignore_errors: true
    changed_when: user_exist_2.rc == 0
    failed_when: false
    args:
      executable: /bin/bash
    when: ha_role == "main"

  - name: MINIO create user on node_2 if not exists
    shell: "{{ minio_cmd }} admin user add MINIO_2 {{ bucket_access_key }} {{ bucket_secret_key }}"
    args:
      executable: /bin/bash
    when: 
      - ha_role == "main"
      - user_exist_2.rc is defined and user_exist_2.rc != 0

  - name: MINIO list attached policies for user on node_1
    shell: "{{ minio_cmd }} admin policy list MINIO_1 --user {{ bucket_access_key }}"
    register: attached_policies_1
    ignore_errors: true
    changed_when: false
    failed_when: false
    args:
      executable: /bin/bash
    when: ha_role == "main"

  - name: MINIO attach readwrite policy to user on node_1 if not attached
    shell: "{{ minio_cmd }} admin policy attach MINIO_1 readwrite --user {{ bucket_access_key }}"
    args:
      executable: /bin/bash
    when:
      - ha_role == "main"
      - "'readwrite' not in attached_policies_1.stdout"
    register: attach_policy
    failed_when: attach_policy.rc != 0 and 'already in effect' not in attach_policy.stderr
    changed_when: attach_policy.rc == 0

  - name: MINIO check if policy is attached on node_2
    shell: "{{ minio_cmd }} admin policy list MINIO_2 --user {{ bucket_access_key }}"
    register: attached_policies_2
    ignore_errors: true
    changed_when: false
    failed_when: false
    args:
      executable: /bin/bash
    when: ha_role == "main"

  - name: MINIO attach readwrite policy to user on node_2 if not attached
    shell: "{{ minio_cmd }} admin policy attach MINIO_2 readwrite --user {{ bucket_access_key }}"
    args:
      executable: /bin/bash    
    register: attach_policy
    failed_when: attach_policy.rc != 0 and 'already in effect' not in attach_policy.stderr
    changed_when: attach_policy.rc == 0
    when:
      - ha_role == "main"
      - "'readwrite' not in attached_policies_2.stdout"

  - name: MINIO check if bucket versioning is enabled
    shell: "{{ minio_cmd }} version info {{ item }} | grep 'un-versioned'"
    loop:
      - MINIO_1/{{ bucket_name }}
      - MINIO_2/{{ bucket_name }}
    register: version_check
    ignore_errors: yes
    changed_when: false
    failed_when: false
    args:
      executable: /bin/bash
    when:
      - ha_role == "main"

  - name: MINIO enable bucket versioning if not enabled
    shell: "{{ minio_cmd }} version enable {{ item }}"
    loop:
      - MINIO_1/{{ bucket_name }}
      - MINIO_2/{{ bucket_name }}
    args:
      executable: /bin/bash
    ignore_errors: yes  
    when:
      - ha_role == "main"
      - (item == "MINIO_1/" + bucket_name and version_check.results[0].rc == 0) or (item == "MINIO_2/" + bucket_name and version_check.results[1].rc == 0)

  - name: MINIO check if replication rule exists
    shell: "{{ minio_cmd }} replicate ls MINIO_1/{{ bucket_name }} | grep 'MINIO_2/{{ bucket_name }}'"
    register: replication_check
    ignore_errors: yes
    changed_when: replication_check.rc == 0
    failed_when: false
    args:
      executable: /bin/bash
    when: 
      - ha_role == "main"

  - name: MINIO set cluster replication if not exists
    shell: "{{ minio_cmd }} replicate add --remote-bucket MINIO_2/{{ bucket_name }} --replicate 'delete,delete-marker,existing-objects' MINIO_1/{{ bucket_name }}"
    args:
      executable: /bin/bash
    register: set_replication
    when:
      - ha_role == "main"
      - replication_check.rc is defined and replication_check.rc != 0
    failed_when: >
      set_replication.rc != 0 and
      'priority must be unique' not in set_replication.stderr
    changed_when: set_replication.rc == 0
