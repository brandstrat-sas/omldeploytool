# Copyright (C) 2024 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can nginxtribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

- name: MINIO OMniLeads Minio component deploy
  hosts: 
    - omnileads_data
    - omnileads_aio
  tags:
    - all_components
    - minio
    - install
  vars:
    minio_cmd: /usr/bin/minio_cmd

  tasks:

  - name: MINIO set environment variables for this installation
    template:
      src: "{{ minio_repo_path }}templates/minio.env"
      dest: /etc/default/minio.env
      mode: 664
      owner: "{{ usuario }}"
      group: "{{ usuario }}"
    tags:
      - upgrade
      - update

  - name: MINIO Copy systemd service
    template:
      src: "{{ minio_repo_path }}templates/minio.service"
      dest: /etc/systemd/system/minio.service
    tags:
      - upgrade
      - update

  - name: MINIO Pull image
    command: podman pull --quiet {{ minio_img }}
    register: podman_pull
    until: podman_pull is success
    tags:
      - upgrade
      - update

  - name: MINIO Enable and start oml minio service
    systemd:
      name: minio.service
      state: started
      enabled: yes
      daemon_reload: yes
    register: minio_run
    until: minio_run is success
    tags:
      - upgrade

  - name: MINIO Restart service
    systemd:
      name: minio.service
      state: restarted
      daemon_reload: yes
    register: minio_run
    until: minio_run is success
    tags:
      - upgrade
      - restart

  - name: MINIO install command line client
    get_url:
      url: https://dl.min.io/client/mc/release/linux-amd64/mc
      dest: '{{ minio_cmd }}'
      mode: '0777'

  - name: MINIO instance alias minio cluster to manage
    shell: "{{ minio_cmd }} alias set MINIO http://{{ data_host }}:9000 '{{ s3_http_admin_user }}' '{{ s3_http_admin_pass }}'"
    args:
      executable: /bin/bash
    when: 
      - omnileads_ha is not defined
      - inventory_hostname in groups['omnileads_data']

  - name: MINIO instance alias minio AIO to manage
    shell: "{{ minio_cmd }} alias set MINIO http://localhost:9000 '{{ s3_http_admin_user }}' '{{ s3_http_admin_pass }}'"
    args:
      executable: /bin/bash
    when: 
      - omnileads_ha is not defined
      - inventory_hostname in groups['omnileads_aio']

  - name: MINIO check if bucket exist
    shell: "{{ minio_cmd }} ls MINIO/{{ bucket_name }}"
    args:
      executable: /bin/bash
    register: bucket_exist
    ignore_errors: true
    when: 
      - omnileads_ha is not defined
    
  - name: MINIO create bucket
    shell: "{{ minio_cmd }} mb MINIO/{{ bucket_name }}"
    args:
      executable: /bin/bash
    when: 
      - bucket_exist.rc is defined and bucket_exist.rc != 0
      - omnileads_ha is not defined
    
  - name: MINIO create user and secret access keys
    shell: "{{ minio_cmd }} admin user add MINIO {{ bucket_access_key }} {{ bucket_secret_key }}"
    args:
      executable: /bin/bash
    when: 
      - omnileads_ha is not defined

  - name: MINIO attach readwrite policy to key-user created
    shell: "{{ minio_cmd }} admin policy attach MINIO readwrite --user {{ bucket_access_key }}"
    args:
      executable: /bin/bash
    ignore_errors: true
    when: 
      - omnileads_ha is not defined

- name: MINIO Include High Availability playbook
  import_playbook: ha.yml
  when: omnileads_ha is defined
