# Copyright (C) 2024 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

- name: POSTGRESQL Hight Availability tasks
  hosts: 
    - omnileads_data
    - omnileads_aio
  tags:
    - all_components
    - data
    - postgres    

  tasks:
     
    - name: POSTGRESQL Template files High Availability are rendered
      template:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
      loop:
        - { src: 'templates/repmgr.conf', dest: '/etc/omnileads/repmgr.conf' }
        - { src: 'templates/postgresql.conf', dest: '/etc/omnileads/postgresql.conf' }
        - { src: 'templates/pg_hba.conf', dest: '/etc/omnileads/pg_hba.conf' }
        - { src: 'templates/pgpass.j2', dest: '/etc/omnileads/pgpass' }
        - { src: 'templates/postgres_vip_manager.sh', dest: '/opt/omnileads/postgres_vip_manager.sh' }
        - { src: 'templates/postgres_vip.j2', dest: '/etc/default/postgres_vip.sh' }
        - { src: 'templates/postgres_vip.service', dest: '/etc/systemd/system/postgres_vip.service' }
      tags:
        - install
        - upgrade
        - update

    - name: Set permission postgres_vip_manager
      file:
        dest: "{{ item }}"
        mode: '0744'
      with_items:
        - "/opt/omnileads/postgres_vip_manager.sh"        
      tags:
        - install
        - upgrade
        - update

    - name: Set permission pgpass
      file:
        dest: "{{ item }}"
        mode: '0600'
      with_items:
        - "/etc/omnileads/pgpass"
      tags:
        - install
        - upgrade
        - update

    - name: POSTGRESQL Enable and start service
      systemd:
        name: postgresql.service
        state: started
        enabled: no
        daemon_reload: yes
      tags:
        - install
        - upgrade
        - update  

    - name: POSTGRESQL Wait for PostgreSQL to be available
      wait_for:
        port: "{{ postgres_port }}"
        host: "{{ aio_1 }}"
        state: started
        timeout: 120
      tags:
        - wait
        - install
        - upgrade

    - name:   
      postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        db: "{{ postgres_database }}"
        priv: "ALL"
        state: present
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when: ha_role == "main"
      tags:
        - install

    - name: POSTGRESQL Create replication user
      postgresql_query:
        query: "DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'replicador') THEN CREATE USER replicador WITH REPLICATION LOGIN PASSWORD '{{ postgres_password }}'; END IF; END $$;"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when:
        - ha_role == "main"
      tags:
        - install

    - name: POSTGRESQL Create superuser repmgr
      postgresql_query:
        query: "DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'repmgr') THEN CREATE USER repmgr WITH SUPERUSER PASSWORD '{{ postgres_password }}'; END IF; END $$;"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when:
        - ha_role == "main"
      tags:
        - install

    - name: POSTGRESQL Create database repmgr
      postgresql_db:
        name: repmgr
        owner: repmgr
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when:
        - ha_role == "main"
      tags:
        - install

    - name: POSTGRESQL chown postgres pgpass container
      shell: "podman exec -it oml-postgresql-server chown postgres:postgres /var/lib/postgresql/.pgpass"
      tags:
        - install
        - upgrade

    - name: POSTGRESQL Stop postgresql service backup node
      service:
        name: postgresql
        state: stopped
      when:
        - ha_role == 'backup'   
      tags:
        - install
        
    - name: POSTGRESQL REPMGR Register like main role
      shell: "podman exec -it oml-postgresql-server sudo -u postgres repmgr -f /etc/postgresql/repmgr.conf primary register -F"
      when: 
        - ha_role == 'main'
      tags:
        - install

    - name: POSTGRESQL REPMGR readonly clone from main dry_run simulation
      shell: "podman run --rm --network=host --env-file=/etc/default/postgres.env --name=oml-postgresql-standby --volume=oml_postgres:/var/lib/postgresql/data --volume=/etc/omnileads/repmgr.conf:/etc/postgresql/repmgr.conf --volume=/etc/omnileads/postgresql.conf:/etc/postgresql/postgresql.conf --volume=/etc/omnileads/pg_hba.conf:/etc/postgresql/pg_hba.conf --volume=/etc/omnileads/pgpass:/var/lib/postgresql/.pgpass {{ postgres_ha_img }}  sudo -u postgres repmgr -h {{ aio_1 }} -U repmgr -d repmgr -f /etc/postgresql/repmgr.conf standby clone --dry-run"
      when: 
        - ha_role == 'backup'
      tags:
        - install

    - name: POSTGRESQL REPMGR readonly clone from main
      shell: "podman run --rm --network=host --env-file=/etc/default/postgres.env --name=oml-postgresql-standby --volume=oml_postgres:/var/lib/postgresql/data --volume=/etc/omnileads/repmgr.conf:/etc/postgresql/repmgr.conf --volume=/etc/omnileads/postgresql.conf:/etc/postgresql/postgresql.conf --volume=/etc/omnileads/pg_hba.conf:/etc/postgresql/pg_hba.conf --volume=/etc/omnileads/pgpass:/var/lib/postgresql/.pgpass {{ postgres_ha_img }}  sudo -u postgres repmgr -h {{ aio_1 }} -U repmgr -d repmgr -f /etc/postgresql/repmgr.conf standby clone -F"
      when: 
        - ha_role == 'backup'
      tags:
        - install

    - name: POSTGRESQL REPMGR Config start postgresql service node backup
      service:
        name: postgresql
        state: started
      when:
        - ha_role == 'backup'
      tags:
        - install

    - name: POSTGRESQL Wait for PostgreSQL to be available
      wait_for:
        port: "{{ postgres_port }}"
        host: "{{ aio_2 }}"
        state: started
        timeout: 120
      tags:
        - wait
        - install
        - upgrade
      when:
        - ha_role == 'backup'

    - name: POSTGRESQL chown postgres pgpass container
      shell: "podman exec -it oml-postgresql-server chown postgres:postgres /var/lib/postgresql/.pgpass"
      when:
        - ha_role == 'backup'
      tags:
        - install
        - upgrade
        - update

    - name: POSTGRESQL REPMGR Register like readonly node
      shell: "podman exec -it oml-postgresql-server sudo -u postgres repmgr -f /etc/postgresql/repmgr.conf standby register -F"
      when: 
        - ha_role == 'backup'
      tags:
        - install      

    - name: POSTGRESQL Repmgr Copy systemd file
      template:
        src: "{{ pgsql_repo_path }}templates/repmgr.service"
        dest: /etc/systemd/system/repmgr.service
      tags: 
        - install
        - upgrade
        - update

    - name: POSTGRESQL Repmgr Enable and start service
      systemd:
        name: repmgr.service
        state: started
        enabled: yes
        daemon_reload: yes
      tags:
        - install
        - upgrade
        - update

    - name: POSTGRESQL Enable and start postgres VIP service
      service:
        name: postgres_vip
        state: started
        enabled: yes
      when: omnileads_ha is defined
      ignore_errors: yes
      tags:
        - install
        - upgrade