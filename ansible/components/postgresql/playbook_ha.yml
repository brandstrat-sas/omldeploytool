# Copyright (C) 2022 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#

---

- name: POSTGRES HA-Cluster CentOS7 installation and configuration
  hosts: ha_omnileads_sql
  tags:
    - all_components
    - postgres
    - install
  
  vars:
    install_prefix: /opt/omnileads
    packages_url: https://fts-public-packages.s3.amazonaws.com
    repmgr_repo: https://dl.enterprisedb.com/default/release/get/11/rpm
    pg_setup_location: "/usr/pgsql-{{ centos_postgresql_version }}/bin/postgresql-{{ centos_postgresql_version }}-setup"
    pg_lib_location_no_version: /var/lib/pgsql
    pg_lib_location: "{{ pg_lib_location_no_version }}/{{ centos_postgresql_version }}/data"
    ansible_python_interpreter: /usr/bin/python3
  
  tasks:

    - name: Install postgresql {{ centos_postgresql_version }} packages (from s3 source)
      #yum: name={{ packages_url }}/postgresql/postgresql{{ centos_postgresql_version}}{{ item }}.rpm state=latest update_cache=yes
      command: yum remove -y postgresql11*
      retries: 3
      delay: 3
      register: s3_delete
      until: s3_delete is success

    # Se instalan los paquetes de postgresql
    - name: Install postgresql {{ centos_postgresql_version }} packages (from s3 source)
      #yum: name={{ packages_url }}/postgresql/postgresql{{ centos_postgresql_version}}{{ item }}.rpm state=latest update_cache=yes
      command: yum install -y {{ packages_url }}/postgresql/postgresql{{ centos_postgresql_version}}{{ item }}.rpm
      with_items:
        - -libs.x86_64
        - .x86_64
        - -odbc.x86_64
        - -server.x86_64
        - -plperl.x86_64
      retries: 3
      delay: 3
      register: s3_download
      until: s3_download is success

    # El initdb de postgres toca ejecutarlo solo para centos
    - name: Setup of postgresql
      command: '{{ pg_setup_location }} initdb'
      register: commandresult
      failed_when:
        - "'is not empty' not in commandresult.stderr"
        - "'is not empty' not in commandresult.stdout"
        - "commandresult.rc != 0"

    #Se modifica la ip en la que escucha postgres para postgres interno no hace falta
    - name: Modify postgresql listen address
      lineinfile:
        path: '{{ pg_lib_location }}/postgresql.conf'
        regexp: "^#listen_addresses"
        line: "listen_addresses = '{{ omni_ip_lan }}'"
        state: present
      when:
        - postgres_host_ha is defined
        - omnileads_ha is not defined

    #Se modifica el timezone de postgres, para postgres interno no hace falta
    - name: Modify postgresql timezone
      lineinfile:
        path: '{{ pg_lib_location }}/postgresql.conf'
        regexp: "^timezone ="
        line: "timezone = 'UTC'"
        state: present
      when: postgres_host_ha is defined

    #Se modifica el data_directory en el caso de usar algun NFS o volumen externo
    - name: Modify postgresql data directory
      lineinfile:
        path: '{{ pg_lib_location }}/postgresql.conf'
        regexp: "^#data_directory"
        line: "data_directory = '{{ data_directory }}'"
        state: present
      when: data_directory is defined

    # Se modifica el pg_hba.conf a partir de template porque pg_hba es para python3 no anda en AIO
    - name: Copy pg_hba.conf AIO template file
      template:
        src: templates/pg_hba.conf.j2
        dest: '{{ pg_lib_location }}/pg_hba.conf'
      when: postgres_host_ha is not defined

    - name: Add line to pg_hba.conf host all omnileads subnet md5
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: '{{ postgres_user }}'
        source: '{{ netaddr }}'
        databases: all
        method: md5
      when: postgres_host_ha is defined

    - name: Add line to pg_hba.conf host all all 127.0.0.1 md5
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: all
        source: 127.0.0.1/32
        databases: all
        method: md5
      when: postgres_host_ha is defined

    - name: Add line to pg_hba.conf host postgres all 127.0.0.1 trust
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: all
        source: 127.0.0.1/32
        databases: all
        method: trust
      when: postgres_host_ha is defined

      # Restarteamos servicio
    - name: Restart postgres service HA
      service:
        name: postgresql-11
        state: restarted
        enabled: no
      when: omnileads_ha is defined
      ignore_errors: yes

    # Se crea usuario, base de datos y extension plperl
    - name: Creating user database and extension plperl
      shell: |
        existe=$(grep -c '^postgres:' /etc/passwd)
        if [ $existe -eq 1 ]; then
          sudo -u postgres psql -c "create database {{ postgres_database }};"
          sudo -u postgres psql -c "create database {{ postgres_homer_db }};"
          sudo -u postgres psql -c "create user {{ postgres_user }} with encrypted password '{{ postgres_password}}';"
          sudo -u postgres psql -c "grant all privileges on database {{ postgres_database }} to {{ postgres_user }};"
          sudo -u postgres psql -c "ALTER USER {{ postgres_user }} WITH SUPERUSER;" | true
        fi
      args:
        executable: /bin/bash
      when: 
        - upgrade_from_oml_1 is not defined
        - ha_rol == "main"

    # - name: POSTGRESQL Adds plperl extension to the database {{ postgres_database }}
    #   postgresql_ext:
    #     name: plperl
    #     db: "{{ postgres_database }}"
    #     login_host: "{{ omni_ip_lan }}"
    #     login_password: "{{ postgres_password }}"
    #     login_user: "{{ postgres_user }}"
    #     port: "{{ postgres_port }}"
    #   tags:
    #     - install
    #   when: 
    #     - upgrade_from_oml_1 is not defined
    #     - ha_rol == "main"
    

    - name: POSTGRES HA Create postgres SSH directory
      file:
        mode: '0755'
        owner: postgres
        group: postgres
        path: "{{ pg_lib_location_no_version }}/.ssh/"
        state: directory

    - name: POSTGRES HA Copy SSH private key
      copy:
        src: "~/.ssh/id_rsa"
        dest: "{{ pg_lib_location_no_version }}/.ssh/id_rsa"
        owner: postgres
        group: postgres
        mode: '0600'

    - name: POSTGRES HA Copy SSH public key
      copy:
        src: "~/.ssh/id_rsa.pub"
        dest: "{{ pg_lib_location_no_version }}/.ssh/id_rsa.pub"
        owner: postgres
        group: postgres
        mode: '0644'

    - name: POSTGRES HA Add key to authorized keys file
      authorized_key:
        user: postgres
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        
    - name: Create of .pgpass files
      template:
        src: templates/.pgpass
        dest: "{{ pg_lib_location_no_version }}/.pgpass"
        mode: 0600
        owner: postgres
        group: postgres


###########################################################  HA Deploy ###########################################################
###########################################################  HA Deploy ###########################################################

    - debug: msg="=============================== Deploy High Availability ARQ ========================================="
      when: omnileads_ha is defined

    - name: Add repmgr repo
      get_url:
        url: '{{ repmgr_repo }}'
        dest: /tmp/repmgr.repo
        mode: '0755'
      when: omnileads_ha is defined

    - name: Install repmgr repo
      command: bash -x repmgr.repo
      args:
        chdir: /tmp
      when: omnileads_ha is defined

    - name: Install High Availability REMPGR
      command: yum install repmgr11 -y
      when: omnileads_ha is defined

    - name: link ln -s repmgr
      file:
        src: /usr/pgsql-11/bin/repmgr
        dest: /usr/local/bin/repmgr
        state: link
      when: omnileads_ha is defined

    - name: link ln -s repmgrd
      file:
        src: /usr/pgsql-11/bin/repmgrd
        dest: /usr/local/bin/repmgrd
        state: link
      when: omnileads_ha is defined

    - name: mkdir archivelog
      file:
        path: "{{ pg_lib_location_no_version }}/archivelog"
        state: directory
        mode: '0755'
        owner: postgres
      when: omnileads_ha is defined

    - name: Template files High Availability are rendered
      template:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
      loop:
        - { src: 'templates/ha_virtual_ip.sh', dest: '{{ pg_lib_location_no_version }}/ha_virtual_ip.sh' }
        - { src: 'templates/repmgr.j2', dest: '{{ pg_lib_location_no_version }}/repmgr.conf' }
        - { src: 'templates/omnileads_envars.j2', dest: '/etc/profile.d/omnileads_envars.sh' }
        - { src: 'templates/ifcfg-nic-main.j2', dest: '/etc/sysconfig/network-scripts/ifcfg-{{ ha_vip_nic }}:0' }
        - { src: 'templates/ifcfg-nic-backup.j2', dest: '/etc/sysconfig/network-scripts/ifcfg-{{ ha_vip_nic }}:1' }
      when: omnileads_ha is defined

    - name: Set permission postgres
      file:
        dest: "{{ item }}"
        owner: postgres
        group: postgres
        mode: '0744'
      with_items:
        - "{{ pg_lib_location_no_version }}/ha_virtual_ip.sh"
        - "{{ pg_lib_location_no_version }}/repmgr.conf"
        - "{{ pg_lib_location_no_version }}/archivelog"
      when: omnileads_ha is defined

    - name: Modify postgresql.conf High Availability
      lineinfile:
        dest: '{{ pg_lib_location }}/postgresql.conf'
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
      loop:
        - { regexp: "^#listen_addresses", line: "listen_addresses = '*'" }
        - { regexp: "^#archive_mode", line: "archive_mode = 'on'" }
        - { regexp: "^#archive_command", line: "archive_command = 'test ! -f {{ pg_lib_location_no_version }}/archivelog/%f && cp %p {{ pg_lib_location_no_version }}/archivelog/%f'" }
        - { regexp: "^#hot_standby", line: "hot_standby = on" }
        - { regexp: "^#shared_preload_libraries", line: "shared_preload_libraries = 'repmgr'"}
      when: omnileads_ha is defined

    - name: Copy omlpgsql-ha service
      copy:
        src: systemd/omlpgsql-ha.service
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      when: omnileads_ha is defined

    - name: Copy repmgr11.service
      copy:
        src: systemd/repmgr11.service
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: '0644'
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf local repmgr repmgr trust
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: local
        users: repmgr
        source:
        databases: repmgr
        method: trust
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf host repmgr repmgr subnet trust
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: repmgr
        source: '{{ netaddr }}'
        databases: repmgr
        method: trust
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf local replication repmgr trust
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: local
        users: repmgr
        source:
        databases: replication
        method: trust
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf local replication all peer
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: local
        users: all
        source:
        databases: replication
        method: peer
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf host replication repmgr subnet trust
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: repmgr
        source: '{{ netaddr }}'
        databases: replication
        method: trust
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf host replication all 127.0.0.1 ident
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: all
        source: 127.0.0.1/32
        databases: replication
        method: ident
      when: omnileads_ha is defined

    - name: Add line to pg_hba.conf host replication replicador subnet md5
      postgresql_pg_hba:
        dest: '{{ pg_lib_location }}/pg_hba.conf'
        contype: host
        users: replicador
        source: '{{ netaddr }}'
        databases: replication
        method: md5
      when: omnileads_ha is defined

    - name: Restart Postgresql service
      systemd:
        name: postgresql-11
        state: restarted
        enabled: no
        daemon_reload: yes
      when: omnileads_ha is defined

    - name: Restart postgres-ha service
      service:
        name: omlpgsql-ha
        state: restarted
        enabled: yes
      when: omnileads_ha is defined
      ignore_errors: yes

    - name: Creating user and databases for HA
      shell: |
        sudo -u postgres psql -c "create user replicador with replication password '{{ postgres_password }}';"
        sudo -u postgres psql -c "create user repmgr WITH SUPERUSER;"
        sudo -u postgres psql -c "create database repmgr OWNER repmgr;" | true
      args:
        executable: /bin/bash
      when: 
        - upgrade_from_oml_1 is not defined
        - ha_rol == "main"

    - name: Stop postgresql-11 service
      service:
        name: postgresql-11
        state: stopped
      when:
        - omnileads_ha is defined
        - ha_rol == 'backup'

    - name: Stop and enable repmgr service
      service:
        name: repmgr11
        state: stopped
        enabled: yes
      when: omnileads_ha is defined
      ignore_errors: yes

    - name: REPMGR Config pg_basebackup CLUSTER HA
      shell: "cd {{ pg_lib_location_no_version }} && sudo -u postgres  pg_basebackup  -D '{{ pg_lib_location_no_version }}'/basebackup -Fp -Xs -P -R"
      when: 
        - omnileads_ha is defined
        - ha_rol == 'main'

    - name: REPMGR RSYNC main to readonly
      shell: "sudo -u postgres rsync -a {{ pg_lib_location_no_version }}/basebackup/  -e 'ssh -o StrictHostKeyChecking=no' root@{{ postgres_2 }}:{{ pg_lib_location_no_version }}/11/data/"
      when: 
        - omnileads_ha is defined      
        - ha_rol == 'main'

    - name: REPMGR Register like main role
      shell: "sudo -u postgres /usr/local/bin/repmgr -f {{ pg_lib_location_no_version }}/repmgr.conf master register -F"
      when: 
        - omnileads_ha is defined
        - ha_rol == 'main'

    - name: REPMGR readonly clone from main
      shell: "sudo -u postgres /usr/local/bin/repmgr -h {{ postgres_1 }} -U repmgr -d repmgr -f {{ pg_lib_location_no_version }}/repmgr.conf standby clone -F"
      when: 
        - omnileads_ha is defined
        - ha_rol == 'backup'

    - name: REPMGR Config start postgresql-11 service node RO
      service:
        name: postgresql-11
        state: started
      when:
        - omnileads_ha is defined
        - ha_rol == 'backup'

    - name: REPMGR Register like readonly node
      shell: "sudo -u postgres /usr/local/bin/repmgr -f {{ pg_lib_location_no_version }}/repmgr.conf standby register -F"
      when: 
        - omnileads_ha is defined
        - ha_rol == 'backup'

    - name: REPMGR Config Start postgres-ha service
      service:
        name: omlpgsql-ha
        state: started
        enabled: yes
      when: omnileads_ha is defined
      ignore_errors: yes

    - name: REPMGR Config Start repmgr service
      service:
        name: repmgr11
        state: started
        enabled: yes
      when: omnileads_ha is defined
      ignore_errors: yes