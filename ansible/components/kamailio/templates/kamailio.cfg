#!KAMAILIO

loadmodule "pv.so"

#!substdef "!MY_IP_ADDR!$env(KAMAILIO_HOSTNAME)!g"
#!substdef "!MY_DOMAIN!$env(KAMAILIO_HOSTNAME)!g"
#!substdef "!MY_ASTERISK!$env(ASTERISK_HOSTNAME)!g"
#!substdef "!MY_ASTERISK_NODE_1!$env(ASTERISK_HOSTNAME_NODE_1)!g"
#!substdef "!MY_ASTERISK_NODE_2!$env(ASTERISK_HOSTNAME_NODE_2)!g"
#!substdef "!REDIS_URL!$env(REDIS_HOSTNAME)!g"
#!substdef "!RTPENGINE_HOST!$env(RTPENGINE_HOSTNAME)!g"

#!substdef "!RTPENGINE_PORT!22222!g"
#!substdef "!MY_UDP_PORT!10060!g"
#!substdef "!MY_WSS_PORT!14443!g"
#!substdef "!MY_ASTERISK_PORT!5160!g"

#!substdef "!MY_UDP_ADDR!udp:MY_IP_ADDR:MY_UDP_PORT!g"
#!substdef "!MY_WSS_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"

#!substdef "!CERT_LOCATION!$env(KAMAILIO_CERTS_LOCATION)/cert.pem!g"
#!substdef "!PKEY_LOCATION!$env(KAMAILIO_CERTS_LOCATION)/key.pem!g"
#!substdef "!SECRET_KEY!SUp3rS3cr3tK3y!g"

####### Defined Values #########

#!define WITH_NAT
#!define WITH_TLS
#!define WITH_WEBSOCKET
#!define WITH_RTPENGINE
#!define WITH_DEBUG
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_ASTERISK
#!define WITH_ANTIFLOOD
#!define WITH_REDIS

#!ifdef WITH_REDIS
#!define DBURL_USRLOC "redis://REDIS_URL:6379/1"
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

#!define SRC_WS 8
#!define SRC_SIP 9

#!define USE_RTPENG 10

#!define WS_DEVICE 11
#!define NATTED_CLIENT 12

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=2
log_stderror=no
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes */
children=8

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
#auto_aliases=yes

# add local domain aliases
alias="MY_DOMAIN"

# uncomment and configure the following line if you want Kamailio to
#   bind on a specific interface/port/proto (default bind on all available)
listen=udp:0.0.0.0:5080 advertise "MY_IP_ADDR"
listen=tls:0.0.0.0:14443 advertise "MY_IP_ADDR"

#!ifdef WITH_TLS
enable_tls=yes
#!endif

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

#!ifdef WITH_WEBSOCKET
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384
#!endif

open_files_limit=4096


#!ifdef WITH_ASTERISK
asterisk.bindip = "MY_ASTERISK"
asterisk.bindport = "MY_ASTERISK_PORT"
kamailio.bindip = "MY_IP_ADDR"
kamailio.bindport = "MY_UDP_PORT"
#!endif


####### Modules Section ########


#!ifdef WITH_POSTGRES
loadmodule "db_postgres.so"
#!endif

#!ifdef WITH_REDIS
loadmodule "db_redis.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "sdpops.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_ephemeral.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ASTERISK
loadmodule "uac.so"
loadmodule "outbound.so"
loadmodule "stun.so"
loadmodule "path.so"
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
#!endif
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_WEBSOCKET
loadmodule "xhttp.so"
loadmodule "websocket.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- redis params -----

#!ifdef WITH_REDIS
modparam("db_redis", "keys", "version=entry:table_name")
modparam("db_redis", "keys", "location=entry:ruid&usrdom:username,domain&timer:partition,keepalive")
modparam("db_redis", "verbosity", 1)
#!endif

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
#modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
#modparam("rr", "append_fromtag", 0)

#!ifdef WITH_ASTERISK
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_full_lr", 1)
#!else
modparam("rr", "append_fromtag", 0)
modparam("rr", "enable_full_lr", 0)
#!endif

# ------ outbound params ------
#!ifdef WITH_ASTERISK
modparam("outbound", "force_outbound_flag", 1)
#!endif


# ----- path params -------------
modparam("path", "use_received", 1)
modparam("path", "received_format", 1)



# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif

# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
#!ifdef WITH_REDIS
modparam("usrloc", "db_url", DBURL_USRLOC)
#!endif
#!ifdef WITH_POSTGRES
modparam("usrloc", "db_url", DBURL)
#!endif
modparam("usrloc", "db_mode", 1)
#modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
#modparam("auth_db", "db_url", DBURL)
#modparam("auth_db", "calculate_ha1", yes)
#modparam("auth_db", "password_column", "password")
#modparam("auth_db", "load_credentials", "")
#modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- auth_ephemeral params -----
modparam("auth_ephemeral", "secret", "SECRET_KEY")

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif

# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif

# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_RTPENGINE
## ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:{{ voice_1 }}:22222 udp:{{ voice_2 }}:22222")
modparam("rtpengine", "rtpengine_disable_tout", 20)
modparam("rtpengine", "rtpengine_tout_ms", 1000)
#!endif

#!ifdef WITH_NAT
# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "private_key", "PKEY_LOCATION")
modparam("tls", "certificate", "CERT_LOCATION")
modparam("tls", "verify_certificate",0 )
modparam("tls", "require_certificate",0 )
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

#!ifdef WITH_DEBUG
xlog("L_INFO", "I am de Logger and here we go again REQUEST_ROUTE \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
#!endif


# per request initial checks
route(REQINIT);

#!ifdef WITH_WEBSOCKET
if (nat_uac_test(64)) {
  # Do NAT traversal stuff for requests from a WebSocket
  # connection - even if it is not behind a NAT!
  # This won't be needed in the future if Kamailio and the
  # WebSocket client support Outbound and Path.
    force_rport();
  	if (is_method("REGISTER")) {
  	   fix_nated_register();
  	} else {
  	    if (!add_contact_alias()) {
  			     xlog("L_ERR", "Error aliasing contact <$ct>\n");
  					 sl_send_reply("400", "Bad Request");
  					 exit;
  			}
  		}
}
#!endif

# NAT detection
route(NATDETECT);

route(TECHDETECT);


# CANCEL processing
if (is_method("CANCEL")) {
	if (t_check_trans()) {
		route(RELAY);
	}
	exit;
}

# handle retransmissions
if (!is_method("ACK")) {
	if(t_precheck_trans()) {
		t_check_trans();
		exit;
	}
	t_check_trans();
}

# handle requests within SIP dialogs
route(WITHINDLG);

### only initial requests (no To tag)

# authentication
route(AUTH);

# record routing for dialog forming requests (in case they are routed)
# - remove preloaded route headers
remove_hf("Route");
if (is_method("INVITE|SUBSCRIBE")) {
	record_route();
}

# dispatch requests to foreign domains
route(SIPOUT);


# handle presence related requests
route(PRESENCE);

# handle registrations
route(REGISTRAR);

if ($rU==$null) {
	# request with no Username in RURI
	sl_send_reply("484","Address Incomplete");
	exit;
}

route(NATMANAGE);

# user location service
route(LOCATION);
}

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) || (src_ip!=MY_ASTERISK || src_ip!=MY_ASTERISK_NODE_1 || src_ip!=MY_ASTERISK_NODE_2) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
      sl_send_reply("403", "Forbidden");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif


#!ifdef WITH_DEBUG
xlog("L_INFO", "I am de Logger and here we go again REQINIT \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
#!endif


  if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("17895", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {

#!ifdef WITH_DEBUG
xlog("L_INFO", "I am de Logger and here we go again WITHINDLG \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
#!endif

  if (!has_totag()) return;

  #!ifdef WITH_WEBSOCKET
  			if ($du == "") {
  				if (!handle_ruri_alias()) {
  					xlog("L_ERR", "Bad alias <$ru>\n");
  					sl_send_reply("400", "Bad Request");
  					exit;
  				}
        }
  #!endif
	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			route(NATMANAGE);
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		# in-dialog subscribe requests
		route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Handle SIP registrations
route[REGISTRAR] {
if (!is_method("REGISTER")) return;

if (nat_uac_test(64)) {
# Do NAT traversal stuff for requests from a WebSocket
# connection - even if it is not behind a NAT!
# This won't be needed in the future if Kamailio and the
# WebSocket client support Outbound and Path.
  force_rport();
  if (is_method("REGISTER"))
    fix_nated_register();
  else {
    if (!add_contact_alias()) {
      xlog("L_ERR", "Error aliasing contact <$ct>\n");
      sl_send_reply("400", "Bad Request");
      exit;
      }
    }
}

	if(isflagset(FLT_NATS)) {
		setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
		# do SIP NAT pinging
		setbflag(FLB_NATSIPPING);
#!endif
	}
	if (!save("location"))
		sl_reply_error();

  #!ifdef WITH_ASTERISK
  if ($au=~"[1-9][0-9][0-9][0-9]$"){
    route(REG2AST);
    }
  #!endif
	exit;
}

# User location service
route[LOCATION] {

#!ifdef WITH_DEBUG
xlog("L_INFO", "I am de Logger and here we go again LOCATION \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
#!endif

#!ifdef WITH_SPEEDDIAL
	# search for short dialing - 2-digit extension
	if($rU=~"^[0-9][0-9]$") {
		if(sd_lookup("speed_dial")) {
			route(SIPOUT);
		}
	}
#!endif

#!ifdef WITH_ALIASDB
	# search in DB-based aliases
	if(alias_db_lookup("dbaliases")) {
		route(SIPOUT);
	}
#!endif


#!ifdef WITH_ASTERISK
	if(is_method("INVITE") && (!route(FROMASTERISK))) {
		# if new call from out there - send to Asterisk
    #!ifdef WITH_DEBUG
    xlog("L_INFO", "I am de Logger and here we go ASTERISSSSSKKKKKK *************  \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
    #!endif
		# - non-INVITE request are routed directly by Kamailio
		# - traffic from Asterisk is routed also directy by Kamailio
		route(TOASTERISK);
		exit;
	}
#!endif

	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}

	route(RELAY);
	exit;
}

# Presence server processing
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;

	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		# returns here if no voicemail server is configured
		sl_send_reply("404", "No voicemail service");
		exit;
	}

#!ifdef WITH_PRESENCE
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
		t_release();
	} else if(is_method("SUBSCRIBE")) {
		handle_subscribe();
		t_release();
	}
	exit;
#!endif

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH
  $avp(uri) = $(fu{s.select,2,:});
  $var(user) = $(avp(uri){s.select,0,@});
  #!ifdef WITH_IPAUTH
    if((!is_method("REGISTER")) && allow_source_address()) {
      # source IP allowed
      return;
    }
  #!endif
  #!ifdef WITH_ASTERISK
  # do not auth traffic from Asterisk - trusted!
    if(route(FROMASTERISK))
      return;
  #!endif

  if (is_method("REGISTER|INVITE")) {
    # authenticate requests
    if (!autheph_check("$fd")) {
      auth_challenge("$fd", "0");
      uac_replace_from("", "sip:$avp(uri)");
      save("location","0x04","sip:$avp(uri)");
      exit;
    }
    # user authenticated - remove auth header
    if(!is_method("REGISTER|PUBLISH"))
      consume_credentials();
  }
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}

#!else
	# authentication not enabled - do not relay at all to foreign networks
	if(uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}
#!endif
	return;
}

# Caller NAT detection
route[NATDETECT] {

#!ifdef WITH_DEBUG
xlog("L_INFO", "I am de Logger and here we go again NATDETECT \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
#!endif

#!ifdef WITH_NAT
	force_rport();

	if (nat_uac_test("83")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if(is_first_hop()) {
				set_contact_alias();
			}
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {

#!ifdef WITH_DEBUG
xlog("L_INFO", "I am de Logger and here we go again NATMANAGE \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
#!endif

#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}

  if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;


	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB) || nat_uac_test("64")) {
			if(is_first_hop())
				set_contact_alias();
		}
	}
#!endif

return;
}

route[TECHDETECT]{


#detect if REQUEST is WebRTC or SIP
if ($proto == "ws" || $proto == "wss"){
  setflag(SRC_WS);
  #!ifdef WITH_DEBUG
  xlog("L_INFO", "I am de Logger and SRC_WEBRTC \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
  #!endif
  }

else{
  setflag(SRC_SIP);
  #!ifdef WITH_DEBUG
  xlog("L_INFO", "I am de Logger and SRC_VOIP \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
  #!endif
  }
}


# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}


# Routing to foreign domains
route[SIPOUT] {
	if (uri==myself) return;

	append_hf("P-hint: outbound\r\n");
	route(RELAY);
	exit;
}

# ******** Asterisk routes ********
# ******** Asterisk routes ********

#!ifdef WITH_ASTERISK
# Test if coming from Asterisk
route[FROMASTERISK]{
if(is_method("INVITE") && src_ip==MY_ASTERISK && $proto!="wss"){
    xlog("L_INFO","the caller is from VoIP asterisk to WebRTC Agents\n");
    return 1;
    }
  return -1;
}


# Send to Asterisk
route[TOASTERISK] {
  #remove the timestamp auth-ephemeral from "from-uri" in order to relay to asterisk endpoint

  uac_replace_from("sip:" + $au + "@" + $sel(cfg_get.asterisk.bindip));
	$du = "sip:" + $sel(cfg_get.asterisk.bindip) + ":"
			+ $sel(cfg_get.asterisk.bindport);
	route(RELAY);
	exit;
}


# registrations forward 2 asterisk
route[REG2AST]
{
  if(!is_method("REGISTER"))
    {
    xlog("L_INFO","Error de registro hacia el Asterisk");
    return;
    }

  $var(rip) = $sel(cfg_get.asterisk.bindip);
  $uac_req(method)="REGISTER";
  $uac_req(ruri)="sip:" + $var(rip) + ":" + $sel(cfg_get.asterisk.bindport);
  $uac_req(furi)="sip:" + $au + "@" + $var(rip);
  $uac_req(turi)="sip:" + $au + "@" + $var(rip);
  $uac_req(hdrs)="Contact: <sip:" + $au + "@" + $sel(cfg_get.kamailio.bindip) + ":" + $sel(cfg_get.kamailio.bindport) + ">\r\n";

  if($sel(contact.expires) != $null)
    $uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $sel(contact.expires) + "\r\n";
  else
    $uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $hdr(Expires) + "\r\n";

  uac_req_send();
}


#!endif


route[IS_MPXY_REQUIRED] {
    # Sets the flag to show if a media proxy is required
    if( (isflagset(SRC_SIP)) && (isbflagset(WS_DEVICE)) ){
      #!ifdef WITH_DEBUG
      xlog("L_INFO", "I am de Logger and RTPENGINE should be involve because SRC_VOIP and DST_WEBRTC \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
      #!endif
      setbflag(USE_RTPENG);
      }

    else if( (isflagset(SRC_WS)) && (!isbflagset(WS_DEVICE)) ){
      setbflag(USE_RTPENG);
      #!ifdef WITH_DEBUG
      xlog("L_INFO", "I am de Logger and RTPENGINE because SRC_WEBRTC and DST_VOIP \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
      #!endif
      }
return;
}


route[rtpengine_offer] {
    if (isflagset(SRC_WS) && isbflagset(WS_DEVICE)){
        # - Web to web
        #!ifdef WITH_DEBUG
        xlog("L_INFO", "I am de Logger and RTPENGINE OFFER WebRTC-to-WebRTC \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
        #!endif
        $var(reflags) = "trust-address replace-origin replace-session-connection SDES-off ICE=force";
        }
    else if (isflagset(SRC_WS)){
        # - Web to SIP
        #!ifdef WITH_DEBUG
        xlog("L_INFO", "I am de Logger and RTPENGINE OFFER WebRTC-to-VoIP \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
        #!endif
        $var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
        }
    else if (isbflagset(WS_DEVICE)){
        # - SIP to web
        #!ifdef WITH_DEBUG
        xlog("L_INFO", "I am de Logger and RTPENGINE OFFER VoIP-to-WebRTC \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
        #!endif
        $var(reflags) = "direction=external direction=external trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off UDP/TLS/RTP/SAVP";
        }
    else {
        # - SIP to SIP
        #!ifdef WITH_DEBUG
        xlog("L_INFO", "I am de Logger and RTPENGINE OFFER VoIP-to-VoIP \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
        #!endif
        $var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
        }

  rtpengine_offer("$var(reflags)");
}

route[rtpengine_answer] {
    if (isflagset(SRC_WS) && isbflagset(WS_DEVICE))
        $var(reflags) = "trust-address replace-origin replace-session-connection SDES-off ICE=force";
    else if (isflagset(SRC_WS))
        $var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force RTP/SAVPF";
    else
        #$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
        $var(reflags) = "direction=internal direction=internal trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";

    rtpengine_answer("$var(reflags)");
}


branch_route[MANAGE_BRANCH] {
  # check if RTPENGINE is requerid for this request
  #!ifdef WITH_DEBUG
  xlog("L_INFO", "BRANCH_ROUTE !!! Request Method=> $rm From Username=> $fU \n");
  #!endif

  if($ru =~ "transport=ws"){
    setbflag(WS_DEVICE);

    if ($du == "") {
      handle_ruri_alias();
      switch ($rc) {
      case -1:
        xlog("L_ERR", "Failed to handle alias of R-URI $ru \n");
        #send_reply("400", "Bad request");
        exit;
      case 1:
        xlog("L_INFO", "Routing in-dialog $rm from $fu to $du\n");
        break;
      case 2:
        xlog("L_INFO", "Routing in-dialog $rm from $fu to $ru\n");
        break;
      }
    }

    #!ifdef WITH_DEBUG
    xlog("L_INFO", "I am de Logger and DST_WEBRTC \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
    #!endif
  }
  else {
    #!ifdef WITH_DEBUG
    xlog("L_INFO", "I am de Logger and DST_VOIP \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
    #!endif
  }

  if(is_method("INVITE")){
    route(IS_MPXY_REQUIRED);
    }


  #!ifdef WITH_RTPENGINE
  if (isbflagset(USE_RTPENG) && $rm=="INVITE" && has_body("application/sdp"))
  route(rtpengine_offer);
  #!endif
}


onreply_route[MANAGE_REPLY] {

  if (nat_uac_test(64)) {
		# Do NAT traversal stuff for replies to a WebSocket connection
		# - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		add_contact_alias();
	}

	if(status=~"183|200") {

    #!ifdef WITH_DEBUG
    xlog("L_INFO", "ONREPLY_ROUTE !!! Response Code=> $rs From Username=> $fU to RURI=> $ru \n");
    #!endif

    if ( t_check_status("(183)|(200)") && sdp_with_transport("RTP/SAVPF") )
      {
      setbflag(WS_DEVICE);
      #!ifdef WITH_DEBUG
      xlog("L_INFO", "I am de Logger and RESPONSE $rm from SRC_WEBRTC \,,/ Response Code=> $rs From Username=> $fU to RURI=> $ru D-URI: $du \n");
      #!endif
      }

    else if ( t_check_status("(183)|(200)") && sdp_with_transport("RTP/AVP") )
      {
      #!ifdef WITH_DEBUG
      xlog("L_INFO", "I am de Logger and RESPONSE $rm from SRC_VOIP \,,/ Method=> $rm From Username=> $fU to RURI=> $ru D-URI: $du \n");
      #!endif
      }

    #!ifdef WITH_RTPENGINE
    if (t_check_status("(183)|(200)") && has_body("application/sdp"))
    route(IS_MPXY_REQUIRED);
    route(rtpengine_answer);
    #!endif
  }

 else {
  #!ifdef WITH_DEBUG
  xlog("L_INFO", "ONREPLY_ROUTE have no sense  !!! Response Code=> $rs From Username=> $fU to RURI=> $ru \n");
  #!endif
  }

}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);
	if (t_is_canceled()) exit;

#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_BLOCK401407
	# block call redirect based on 401, 407 replies.
	if (t_check_status("401|407")) {
		t_reply("404","Not found");
		exit;
	}
#!endif
}


#!ifdef WITH_WEBSOCKET
event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();
	if ($hdr(Upgrade)=~"websocket"
			&& $hdr(Connection)=~"Upgrade"
			&& $rm=~"GET") {

		# Validate Host - make sure the client is using the correct
		# alias for WebSockets
		if ($hdr(Host) == $null) {
			xlog("L_WARN", "Bad host $hdr(Host)\n");
			xhttp_reply("403", "Forbidden", "", "");
			exit;
		}
		if (ws_handle_handshake()) {
			# Optional... cache some information about the
			# successful connection
			exit;
		}
	}
	xhttp_reply("404", "Not Found", "", "");
}
#!endif
