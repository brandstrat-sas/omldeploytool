# Copyright (C) 2024 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

- name: OMniLeads RESTORE Playbook
  hosts: 
    - omnileads_data
    - omnileads_app
    - omnileads_aio
  tags:
    - restore
  tasks:

    - name: RESTORE postgres Stop postgresql systemd service 
      service:
        name: postgresql
        state: stopped
      when:
        - inventory_hostname in groups['omnileads_data'] or inventory_hostname in groups['omnileads_aio']

    - name: RESTORE POSTGRESQL stop postgres VIP service
      service:
        name: postgres_vip
        state: stopped
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined        

    - name: RESTORE POSTGRESQL stop REPMGR service
      service:
        name: repmgr
        state: stopped
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined        

    - name: RESTORE postgres drop database podman
      shell: "podman volume rm oml_postgres"
      when:
        - inventory_hostname in groups['omnileads_data'] or inventory_hostname in groups['omnileads_aio']

    - name: RESTORE postgres Start postgresql systemd service
      service:
        name: postgresql
        state: started
      when:
        - inventory_hostname in groups['omnileads_data'] or inventory_hostname in groups['omnileads_aio']  

    - name: RESTORE DJANGO Restart systemd service
      systemd:
        name: omnileads.service
        state: restarted
        enabled: yes
        daemon_reload: yes
      when:
        - inventory_hostname in groups['omnileads_app'] or inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is not defined      

    ######################################## HA tasks ###################################################
    ######################################## HA tasks ###################################################
    
    - name: RESTORE POSTGRESQL Wait for PostgreSQL to be available
      wait_for:
        port: "{{ postgres_port }}"
        host: "{{ aio_1 }}"
        state: started
        timeout: 120
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined

    - name: RESTORE postgres DB pg_restore
      shell: "podman run --name pgsql_bk_{{ restore_file_timestamp }} --network=host --env-file /etc/default/django.env -e BACKUP_FILENAME=pgsql-backup-{{ restore_file_timestamp }}.sql -e PGHOST={{ aio_1 }} --rm {{ omnileads_img }} bash -x /opt/omnileads/bin/init_pgsql_restore.sh"
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined     
        - ha_role == 'main'
    
    - name: RESTORE Create replication user
      postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        db: "{{ postgres_database }}"
        priv: "ALL"
        state: present
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == "main"
      
    - name: RESTORE POSTGRESQL Create replication user
      postgresql_query:
        query: "DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'replicador') THEN CREATE USER replicador WITH REPLICATION LOGIN PASSWORD '{{ postgres_password }}'; END IF; END $$;"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == "main"
      
    - name: RESTORE POSTGRESQL Create superuser repmgr
      postgresql_query:
        query: "DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'repmgr') THEN CREATE USER repmgr WITH SUPERUSER PASSWORD '{{ postgres_password }}'; END IF; END $$;"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == "main"
      
    - name: RESTORE POSTGRESQL Create database repmgr
      postgresql_db:
        name: repmgr
        owner: repmgr
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_host: "{{ aio_1 }}"
        login_port: "{{ postgres_port }}"
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == "main"
      
    - name: RESTORE POSTGRESQL chown postgres pgpass container
      shell: "podman exec -it oml-postgresql-server chown postgres:postgres /var/lib/postgresql/.pgpass"
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
      
    - name: RESTORE POSTGRESQL Stop postgresql service backup node
      service:
        name: postgresql
        state: stopped
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'   
        
    - name: RESTORE POSTGRESQL REPMGR Register like main role
      shell: "podman exec -it oml-postgresql-server sudo -u postgres repmgr -f /etc/postgresql/repmgr.conf primary register -F"
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'main'

    - name: POSTGRESQL REPMGR readonly clone from main dry_run simulation
      shell: "podman run --rm --network=host --env-file=/etc/default/postgres.env --name=oml-postgresql-standby --volume=oml_postgres:/var/lib/postgresql/data --volume=/etc/omnileads/repmgr.conf:/etc/postgresql/repmgr.conf --volume=/etc/omnileads/postgresql.conf:/etc/postgresql/postgresql.conf --volume=/etc/omnileads/pg_hba.conf:/etc/postgresql/pg_hba.conf --volume=/etc/omnileads/pgpass:/var/lib/postgresql/.pgpass {{ postgres_ha_img }}  sudo -u postgres repmgr -h {{ aio_1 }} -U repmgr -d repmgr -f /etc/postgresql/repmgr.conf standby clone --dry-run"
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'

    - name: RESTORE POSTGRESQL REPMGR readonly clone from main
      shell: "podman run --rm --network=host --env-file=/etc/default/postgres.env --name=oml-postgresql-standby --volume=oml_postgres:/var/lib/postgresql/data --volume=/etc/omnileads/repmgr.conf:/etc/postgresql/repmgr.conf --volume=/etc/omnileads/postgresql.conf:/etc/postgresql/postgresql.conf --volume=/etc/omnileads/pg_hba.conf:/etc/postgresql/pg_hba.conf --volume=/etc/omnileads/pgpass:/var/lib/postgresql/.pgpass {{ postgres_ha_img }}  sudo -u postgres repmgr -h {{ aio_1 }} -U repmgr -d repmgr -f /etc/postgresql/repmgr.conf standby clone -F"
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'

    - name: RESTORE POSTGRESQL REPMGR Config start postgresql service node backup
      service:
        name: postgresql
        state: started
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'

    - name: RESTORE POSTGRESQL Wait for PostgreSQL to be available
      wait_for:
        port: "{{ postgres_port }}"
        host: "{{ aio_2 }}"
        state: started
        timeout: 120
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'

    - name: RESTORE POSTGRESQL chown postgres pgpass container
      shell: "podman exec -it oml-postgresql-server chown postgres:postgres /var/lib/postgresql/.pgpass"
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'

    - name: RESTORE POSTGRESQL REPMGR Register like readonly node
      shell: "podman exec -it oml-postgresql-server sudo -u postgres repmgr -f /etc/postgresql/repmgr.conf standby register -F"
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'backup'

    - name: RESTORE POSTGRESQL Repmgr Enable and start service
      systemd:
        name: repmgr.service
        state: started
        enabled: yes
        daemon_reload: yes  
      when: 
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        
    - name: RESTORE POSTGRESQL Enable and start postgres VIP service
      service:
        name: postgres_vip
        state: started
        enabled: yes
      when: 
        - omnileads_ha is defined         
        - inventory_hostname in groups['omnileads_aio']
      ignore_errors: yes

    - name: RESTORE DJANGO Restart systemd service
      systemd:
        name: omnileads.service
        state: restarted
        enabled: yes
        daemon_reload: yes
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'main'

    - name: RESTORE DJANGO nginx
      systemd:
        name: nginx.service
        state: restarted
        enabled: yes
        daemon_reload: yes
      when:
        - inventory_hostname in groups['omnileads_aio']
        - omnileads_ha is defined      
        - ha_role == 'main'